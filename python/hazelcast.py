# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hazelcast', [dirname(__file__)])
        except ImportError:
            import _hazelcast
            return _hazelcast
        if fp is not None:
            try:
                _mod = imp.load_module('_hazelcast', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hazelcast = swig_import_helper()
    del swig_import_helper
else:
    import _hazelcast
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class ClientConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClientConfig, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hazelcast.new_hazelcast_client_ClientConfig()
        try:
            self.this.append(this)
        except:
            self.this = this

    def addAddress(self, address):
        return _hazelcast.ClientConfig_addAddress(self, address)

    def addAddresses(self, addresses):
        return _hazelcast.ClientConfig_addAddresses(self, addresses)

    def getAddresses(self):
        return _hazelcast.ClientConfig_getAddresses(self)

    def setGroupConfig(self, groupConfig):
        return _hazelcast.ClientConfig_setGroupConfig(self, groupConfig)

    def getGroupConfig(self):
        return _hazelcast.ClientConfig_getGroupConfig(self)

    def setCredentials(self, credentials):
        return _hazelcast.ClientConfig_setCredentials(self, credentials)

    def getCredentials(self):
        return _hazelcast.ClientConfig_getCredentials(self)

    def setConnectionAttemptLimit(self, connectionAttemptLimit):
        return _hazelcast.ClientConfig_setConnectionAttemptLimit(self, connectionAttemptLimit)

    def getConnectionAttemptLimit(self):
        return _hazelcast.ClientConfig_getConnectionAttemptLimit(self)

    def setConnectionTimeout(self, connectionTimeoutInMillis):
        return _hazelcast.ClientConfig_setConnectionTimeout(self, connectionTimeoutInMillis)

    def getConnectionTimeout(self):
        return _hazelcast.ClientConfig_getConnectionTimeout(self)

    def setAttemptPeriod(self, attemptPeriodInMillis):
        return _hazelcast.ClientConfig_setAttemptPeriod(self, attemptPeriodInMillis)

    def getAttemptPeriod(self):
        return _hazelcast.ClientConfig_getAttemptPeriod(self)

    def setRedoOperation(self, redoOperation):
        return _hazelcast.ClientConfig_setRedoOperation(self, redoOperation)

    def isRedoOperation(self):
        return _hazelcast.ClientConfig_isRedoOperation(self)

    def isSmart(self):
        return _hazelcast.ClientConfig_isSmart(self)

    def setSmart(self, smart):
        return _hazelcast.ClientConfig_setSmart(self, smart)

    def setSocketInterceptor(self, socketInterceptor):
        return _hazelcast.ClientConfig_setSocketInterceptor(self, socketInterceptor)

    def getSocketInterceptor(self):
        return _hazelcast.ClientConfig_getSocketInterceptor(self)

    def getLifecycleListeners(self):
        return _hazelcast.ClientConfig_getLifecycleListeners(self)

    def getMembershipListeners(self):
        return _hazelcast.ClientConfig_getMembershipListeners(self)

    def addListener(self, *args):
        return _hazelcast.ClientConfig_addListener(self, *args)

    def getInitialMembershipListeners(self):
        return _hazelcast.ClientConfig_getInitialMembershipListeners(self)

    def getLoadBalancer(self):
        return _hazelcast.ClientConfig_getLoadBalancer(self)

    def setLoadBalancer(self, loadBalancer):
        return _hazelcast.ClientConfig_setLoadBalancer(self, loadBalancer)

    def setLogLevel(self, loggerLevel):
        return _hazelcast.ClientConfig_setLogLevel(self, loggerLevel)

    def getSerializationConfig(self):
        return _hazelcast.ClientConfig_getSerializationConfig(self)

    def setSerializationConfig(self, serializationConfig):
        return _hazelcast.ClientConfig_setSerializationConfig(self, serializationConfig)

    def getProperties(self):
        return _hazelcast.ClientConfig_getProperties(self)

    def setProperty(self, name, value):
        return _hazelcast.ClientConfig_setProperty(self, name, value)
    __swig_destroy__ = _hazelcast.delete_hazelcast_client_ClientConfig
    __del__ = lambda self: None
ClientConfig_swigregister = _hazelcast.ClientConfig_swigregister
ClientConfig_swigregister(ClientConfig)

class DistributedObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributedObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DistributedObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getServiceName(self):
        return _hazelcast.DistributedObject_getServiceName(self)

    def getName(self):
        return _hazelcast.DistributedObject_getName(self)

    def destroy(self):
        return _hazelcast.DistributedObject_destroy(self)
    __swig_destroy__ = _hazelcast.delete_hazelcast_client_DistributedObject
    __del__ = lambda self: None
DistributedObject_swigregister = _hazelcast.DistributedObject_swigregister
DistributedObject_swigregister(DistributedObject)

class ProxyImpl(DistributedObject):
    __swig_setmethods__ = {}
    for _s in [DistributedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DistributedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyImpl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def destroy(self):
        return _hazelcast.ProxyImpl_destroy(self)
ProxyImpl_swigregister = _hazelcast.ProxyImpl_swigregister
ProxyImpl_swigregister(ProxyImpl)

class IMapImpl(ProxyImpl):
    __swig_setmethods__ = {}
    for _s in [ProxyImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMapImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [ProxyImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMapImpl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _hazelcast.delete_hazelcast_client_proxy_IMapImpl
    __del__ = lambda self: None
IMapImpl_swigregister = _hazelcast.IMapImpl_swigregister
IMapImpl_swigregister(IMapImpl)

class HazelcastClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HazelcastClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HazelcastClient, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _hazelcast.new_hazelcast_client_HazelcastClient(arg2)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hazelcast.delete_hazelcast_client_HazelcastClient
    __del__ = lambda self: None

    def getClientConfig(self):
        return _hazelcast.HazelcastClient_getClientConfig(self)

    def getCluster(self):
        return _hazelcast.HazelcastClient_getCluster(self)

    def addLifecycleListener(self, lifecycleListener):
        return _hazelcast.HazelcastClient_addLifecycleListener(self, lifecycleListener)

    def removeLifecycleListener(self, lifecycleListener):
        return _hazelcast.HazelcastClient_removeLifecycleListener(self, lifecycleListener)

    def shutdown(self):
        return _hazelcast.HazelcastClient_shutdown(self)

    def getIntMapDistributedObject(self, name):
        return _hazelcast.HazelcastClient_getIntMapDistributedObject(self, name)

    def getIntMap(self, name):
        return _hazelcast.hazelcast_client_HazelcastClient_getIntMap(self, name)
HazelcastClient_swigregister = _hazelcast.HazelcastClient_swigregister
HazelcastClient_swigregister(HazelcastClient)

class IntEntryView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntEntryView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntEntryView, name)
    __repr__ = _swig_repr

    def __init__(self, key, value, rhs):
        this = _hazelcast.new_IntEntryView(key, value, rhs)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["key"] = _hazelcast.IntEntryView_key_set
    __swig_getmethods__["key"] = _hazelcast.IntEntryView_key_get
    if _newclass:
        key = _swig_property(_hazelcast.IntEntryView_key_get, _hazelcast.IntEntryView_key_set)
    __swig_setmethods__["value"] = _hazelcast.IntEntryView_value_set
    __swig_getmethods__["value"] = _hazelcast.IntEntryView_value_get
    if _newclass:
        value = _swig_property(_hazelcast.IntEntryView_value_get, _hazelcast.IntEntryView_value_set)
    __swig_setmethods__["cost"] = _hazelcast.IntEntryView_cost_set
    __swig_getmethods__["cost"] = _hazelcast.IntEntryView_cost_get
    if _newclass:
        cost = _swig_property(_hazelcast.IntEntryView_cost_get, _hazelcast.IntEntryView_cost_set)
    __swig_setmethods__["creationTime"] = _hazelcast.IntEntryView_creationTime_set
    __swig_getmethods__["creationTime"] = _hazelcast.IntEntryView_creationTime_get
    if _newclass:
        creationTime = _swig_property(_hazelcast.IntEntryView_creationTime_get, _hazelcast.IntEntryView_creationTime_set)
    __swig_setmethods__["expirationTime"] = _hazelcast.IntEntryView_expirationTime_set
    __swig_getmethods__["expirationTime"] = _hazelcast.IntEntryView_expirationTime_get
    if _newclass:
        expirationTime = _swig_property(_hazelcast.IntEntryView_expirationTime_get, _hazelcast.IntEntryView_expirationTime_set)
    __swig_setmethods__["hits"] = _hazelcast.IntEntryView_hits_set
    __swig_getmethods__["hits"] = _hazelcast.IntEntryView_hits_get
    if _newclass:
        hits = _swig_property(_hazelcast.IntEntryView_hits_get, _hazelcast.IntEntryView_hits_set)
    __swig_setmethods__["lastAccessTime"] = _hazelcast.IntEntryView_lastAccessTime_set
    __swig_getmethods__["lastAccessTime"] = _hazelcast.IntEntryView_lastAccessTime_get
    if _newclass:
        lastAccessTime = _swig_property(_hazelcast.IntEntryView_lastAccessTime_get, _hazelcast.IntEntryView_lastAccessTime_set)
    __swig_setmethods__["lastStoredTime"] = _hazelcast.IntEntryView_lastStoredTime_set
    __swig_getmethods__["lastStoredTime"] = _hazelcast.IntEntryView_lastStoredTime_get
    if _newclass:
        lastStoredTime = _swig_property(_hazelcast.IntEntryView_lastStoredTime_get, _hazelcast.IntEntryView_lastStoredTime_set)
    __swig_setmethods__["lastUpdateTime"] = _hazelcast.IntEntryView_lastUpdateTime_set
    __swig_getmethods__["lastUpdateTime"] = _hazelcast.IntEntryView_lastUpdateTime_get
    if _newclass:
        lastUpdateTime = _swig_property(_hazelcast.IntEntryView_lastUpdateTime_get, _hazelcast.IntEntryView_lastUpdateTime_set)
    __swig_setmethods__["version"] = _hazelcast.IntEntryView_version_set
    __swig_getmethods__["version"] = _hazelcast.IntEntryView_version_get
    if _newclass:
        version = _swig_property(_hazelcast.IntEntryView_version_get, _hazelcast.IntEntryView_version_set)
    __swig_destroy__ = _hazelcast.delete_IntEntryView
    __del__ = lambda self: None
IntEntryView_swigregister = _hazelcast.IntEntryView_swigregister
IntEntryView_swigregister(IntEntryView)

class IntMap(IMapImpl):
    __swig_setmethods__ = {}
    for _s in [IMapImpl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMap, name, value)
    __swig_getmethods__ = {}
    for _s in [IMapImpl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntMap, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def containsKey(self, key):
        return _hazelcast.IntMap_containsKey(self, key)

    def containsValue(self, value):
        return _hazelcast.IntMap_containsValue(self, value)

    def get(self, key):
        return _hazelcast.IntMap_get(self, key)

    def remove(self, *args):
        return _hazelcast.IntMap_remove(self, *args)

    def deleteEntry(self, key):
        return _hazelcast.IntMap_deleteEntry(self, key)

    def flush(self):
        return _hazelcast.IntMap_flush(self)

    def tryRemove(self, key, timeoutInMillis):
        return _hazelcast.IntMap_tryRemove(self, key, timeoutInMillis)

    def tryPut(self, key, value, timeoutInMillis):
        return _hazelcast.IntMap_tryPut(self, key, value, timeoutInMillis)

    def put(self, *args):
        return _hazelcast.IntMap_put(self, *args)

    def putTransient(self, key, value, ttlInMillis):
        return _hazelcast.IntMap_putTransient(self, key, value, ttlInMillis)

    def putIfAbsent(self, *args):
        return _hazelcast.IntMap_putIfAbsent(self, *args)

    def replace(self, *args):
        return _hazelcast.IntMap_replace(self, *args)

    def lock(self, *args):
        return _hazelcast.IntMap_lock(self, *args)

    def isLocked(self, key):
        return _hazelcast.IntMap_isLocked(self, key)

    def tryLock(self, *args):
        return _hazelcast.IntMap_tryLock(self, *args)

    def unlock(self, key):
        return _hazelcast.IntMap_unlock(self, key)

    def forceUnlock(self, key):
        return _hazelcast.IntMap_forceUnlock(self, key)

    def removeInterceptor(self, id):
        return _hazelcast.IntMap_removeInterceptor(self, id)

    def removeEntryListener(self, registrationId):
        return _hazelcast.IntMap_removeEntryListener(self, registrationId)

    def addEntryListener(self, *args):
        return _hazelcast.IntMap_addEntryListener(self, *args)

    def getEntryView(self, key):
        return _hazelcast.IntMap_getEntryView(self, key)

    def evict(self, key):
        return _hazelcast.IntMap_evict(self, key)

    def evictAll(self):
        return _hazelcast.IntMap_evictAll(self)

    def getAll(self, keys):
        return _hazelcast.IntMap_getAll(self, keys)

    def keySet(self, *args):
        return _hazelcast.IntMap_keySet(self, *args)

    def entrySet(self, *args):
        return _hazelcast.IntMap_entrySet(self, *args)

    def values(self, *args):
        return _hazelcast.IntMap_values(self, *args)

    def addIndex(self, attribute, ordered):
        return _hazelcast.IntMap_addIndex(self, attribute, ordered)

    def set(self, *args):
        return _hazelcast.IntMap_set(self, *args)

    def size(self):
        return _hazelcast.IntMap_size(self)

    def isEmpty(self):
        return _hazelcast.IntMap_isEmpty(self)

    def putAll(self, entries):
        return _hazelcast.IntMap_putAll(self, entries)

    def clear(self):
        return _hazelcast.IntMap_clear(self)
    __swig_destroy__ = _hazelcast.delete_hazelcast_client_IntMap
    __del__ = lambda self: None
IntMap_swigregister = _hazelcast.IntMap_swigregister
IntMap_swigregister(IntMap)

# This file is compatible with both classic and new-style classes.


